generator client {
  provider = "prisma-client-js"
  output   = "./pgclient"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  ACCEPTED
  DECIDING
}

// Table names are generally spelled in PascalCase. Column names in camelCase.
// Model names should use the singular form (for example, User instead of user, users or Users)
// Relation scalar naming conventions
// Because a relation scalar field always belongs to a relation field, the following naming convention is common:
// Relation field: author
// Relation scalar field: authorId (relation field name + Id)

// MAIN TABLE

model User {
  id        BigInt   @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  fullname  String   @db.VarChar(255)
  password  String   @db.VarChar(128)
  phoneNo   String?  @unique @db.VarChar(30)
  city      String?  @db.Text
  address   String?  @db.Text
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)

  Products      Product[]
  Notifications Notification[]
  Transactions  TransactionsOnUsers[]
  Photos        StoragesOnUsers[]
}

model Product {
  id          BigInt   @id @default(autoincrement())
  name        String   @db.VarChar(255)
  price       Decimal  @default(0) @db.Decimal(12, 2)
  description String   @db.Text
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @db.Timestamptz(6)

  User        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      BigInt
  Transaction Transaction?
  Categories  CategoriesOnProducts[]
  Photos      ProductsOnStorages[]
}

model Category {
  id        BigInt   @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)

  Products CategoriesOnProducts[]
}

model Transaction {
  id        BigInt            @id @default(autoincrement())
  status    TransactionStatus @default(DECIDING)
  createdAt DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt DateTime          @default(now()) @db.Timestamptz(6)

  Product   Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId BigInt                @unique
  Users     TransactionsOnUsers[]
}

model Notification {
  id        BigInt   @id @default(autoincrement())
  data      String   @db.Text
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId BigInt
}

model Storage {
  id       BigInt @id @default(autoincrement())
  filename String @db.VarChar(128)
  size     BigInt @default(0)
  mimetype String

  Products ProductsOnStorages[]
  Users    StoragesOnUsers[]
}

// PIVOT TABLE

model TransactionsOnUsers {
  offeredPrice Decimal  @db.Decimal(12, 2)
  description  String?  @db.Text
  accepted     Boolean  @default(false)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        BigInt
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId BigInt

  @@id([userId, transactionId])
}

model CategoriesOnProducts {
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId BigInt
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  BigInt

  @@id([categoryId, productId])
}

model ProductsOnStorages {
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId BigInt
  Storage   Storage @relation(fields: [storageId], references: [id], onDelete: Cascade)
  storageId BigInt

  @@id([storageId, productId])
}

model StoragesOnUsers {
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  Storage   Storage @relation(fields: [storageId], references: [id], onDelete: Cascade)
  storageId BigInt
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt

  @@id([storageId, userId])
}
